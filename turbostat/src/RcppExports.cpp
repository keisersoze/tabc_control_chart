// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// setseed
void setseed(unsigned s);
RcppExport SEXP _turbostat_setseed(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type s(sSEXP);
    setseed(s);
    return R_NilValue;
END_RCPP
}
// t_a_binding
Rcpp::DataFrame t_a_binding(const std::vector<double>& x1, const std::vector<double>& x2, unsigned B);
RcppExport SEXP _turbostat_t_a_binding(SEXP x1SEXP, SEXP x2SEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< unsigned >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(t_a_binding(x1, x2, B));
    return rcpp_result_gen;
END_RCPP
}
// t_b_binding
Rcpp::DataFrame t_b_binding(const std::vector<double>& x1, const std::vector<double>& x2, unsigned B);
RcppExport SEXP _turbostat_t_b_binding(SEXP x1SEXP, SEXP x2SEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< unsigned >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(t_b_binding(x1, x2, B));
    return rcpp_result_gen;
END_RCPP
}
// t_c_binding
Rcpp::DataFrame t_c_binding(const std::vector<double>& x1, const std::vector<double>& x2, unsigned B);
RcppExport SEXP _turbostat_t_c_binding(SEXP x1SEXP, SEXP x2SEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< unsigned >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(t_c_binding(x1, x2, B));
    return rcpp_result_gen;
END_RCPP
}
// t_abc_binding
Rcpp::DataFrame t_abc_binding(const std::vector<double>& x1, const std::vector<double>& x2, unsigned B);
RcppExport SEXP _turbostat_t_abc_binding(SEXP x1SEXP, SEXP x2SEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< unsigned >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(t_abc_binding(x1, x2, B));
    return rcpp_result_gen;
END_RCPP
}
// t_ab_binding
Rcpp::DataFrame t_ab_binding(const std::vector<double>& x1, const std::vector<double>& x2, unsigned B);
RcppExport SEXP _turbostat_t_ab_binding(SEXP x1SEXP, SEXP x2SEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< unsigned >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(t_ab_binding(x1, x2, B));
    return rcpp_result_gen;
END_RCPP
}
// t_bc_binding
Rcpp::DataFrame t_bc_binding(const std::vector<double>& x1, const std::vector<double>& x2, unsigned B);
RcppExport SEXP _turbostat_t_bc_binding(SEXP x1SEXP, SEXP x2SEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< unsigned >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(t_bc_binding(x1, x2, B));
    return rcpp_result_gen;
END_RCPP
}
// t_ac_binding
Rcpp::DataFrame t_ac_binding(const std::vector<double>& x1, const std::vector<double>& x2, unsigned B);
RcppExport SEXP _turbostat_t_ac_binding(SEXP x1SEXP, SEXP x2SEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< unsigned >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(t_ac_binding(x1, x2, B));
    return rcpp_result_gen;
END_RCPP
}
// calibrate_unconditional
Rcpp::NumericMatrix calibrate_unconditional(unsigned m, unsigned n, const std::string& distribution_key, Rcpp::List distribution_parameters, const std::string& monitoring_statistic_key, Rcpp::List monitoring_statistic_parameters, const std::vector<double>& lcl_seq, unsigned nsim, unsigned run_length_cap);
RcppExport SEXP _turbostat_calibrate_unconditional(SEXP mSEXP, SEXP nSEXP, SEXP distribution_keySEXP, SEXP distribution_parametersSEXP, SEXP monitoring_statistic_keySEXP, SEXP monitoring_statistic_parametersSEXP, SEXP lcl_seqSEXP, SEXP nsimSEXP, SEXP run_length_capSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type m(mSEXP);
    Rcpp::traits::input_parameter< unsigned >::type n(nSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type distribution_key(distribution_keySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type distribution_parameters(distribution_parametersSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type monitoring_statistic_key(monitoring_statistic_keySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type monitoring_statistic_parameters(monitoring_statistic_parametersSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type lcl_seq(lcl_seqSEXP);
    Rcpp::traits::input_parameter< unsigned >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< unsigned >::type run_length_cap(run_length_capSEXP);
    rcpp_result_gen = Rcpp::wrap(calibrate_unconditional(m, n, distribution_key, distribution_parameters, monitoring_statistic_key, monitoring_statistic_parameters, lcl_seq, nsim, run_length_cap));
    return rcpp_result_gen;
END_RCPP
}
// evaluate_unconditional
Rcpp::DataFrame evaluate_unconditional(unsigned m, unsigned n, double LCL, const std::vector<double>& shifts, const std::string& distribution_key, Rcpp::List distribution_parameters, const std::string& monitoring_statistic_key, Rcpp::List monitoring_statistic_parameters, unsigned nsim, unsigned run_length_cap);
RcppExport SEXP _turbostat_evaluate_unconditional(SEXP mSEXP, SEXP nSEXP, SEXP LCLSEXP, SEXP shiftsSEXP, SEXP distribution_keySEXP, SEXP distribution_parametersSEXP, SEXP monitoring_statistic_keySEXP, SEXP monitoring_statistic_parametersSEXP, SEXP nsimSEXP, SEXP run_length_capSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type m(mSEXP);
    Rcpp::traits::input_parameter< unsigned >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type LCL(LCLSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type shifts(shiftsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type distribution_key(distribution_keySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type distribution_parameters(distribution_parametersSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type monitoring_statistic_key(monitoring_statistic_keySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type monitoring_statistic_parameters(monitoring_statistic_parametersSEXP);
    Rcpp::traits::input_parameter< unsigned >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< unsigned >::type run_length_cap(run_length_capSEXP);
    rcpp_result_gen = Rcpp::wrap(evaluate_unconditional(m, n, LCL, shifts, distribution_key, distribution_parameters, monitoring_statistic_key, monitoring_statistic_parameters, nsim, run_length_cap));
    return rcpp_result_gen;
END_RCPP
}
// test_exp
std::vector<double> test_exp(unsigned n);
RcppExport SEXP _turbostat_test_exp(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(test_exp(n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_turbostat_setseed", (DL_FUNC) &_turbostat_setseed, 1},
    {"_turbostat_t_a_binding", (DL_FUNC) &_turbostat_t_a_binding, 3},
    {"_turbostat_t_b_binding", (DL_FUNC) &_turbostat_t_b_binding, 3},
    {"_turbostat_t_c_binding", (DL_FUNC) &_turbostat_t_c_binding, 3},
    {"_turbostat_t_abc_binding", (DL_FUNC) &_turbostat_t_abc_binding, 3},
    {"_turbostat_t_ab_binding", (DL_FUNC) &_turbostat_t_ab_binding, 3},
    {"_turbostat_t_bc_binding", (DL_FUNC) &_turbostat_t_bc_binding, 3},
    {"_turbostat_t_ac_binding", (DL_FUNC) &_turbostat_t_ac_binding, 3},
    {"_turbostat_calibrate_unconditional", (DL_FUNC) &_turbostat_calibrate_unconditional, 9},
    {"_turbostat_evaluate_unconditional", (DL_FUNC) &_turbostat_evaluate_unconditional, 10},
    {"_turbostat_test_exp", (DL_FUNC) &_turbostat_test_exp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_turbostat(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
